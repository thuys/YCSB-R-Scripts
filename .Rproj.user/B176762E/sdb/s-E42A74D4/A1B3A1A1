{
    "contents" : "assign(\"sToRemove\", 10, envir = .GlobalEnv)\nassign(\"movingAverageFrame\", 20, envir = .GlobalEnv)\nassign(\"possibleActions\", c(\"INSERT\", \"UPDATE\", \"READ\", \"CLEANUP\"), envir = .GlobalEnv)\nassign(\"globalElements\", c(\"Operations\", \"AverageLatency(us)\", \"MinLatency(us)\", \"MaxLatency(us)\", \"Return=1\", \"Return=0\", \"Return=-1\"), envir = .GlobalEnv)\nassign(\"figureWidth\", 1024, envir = .GlobalEnv)\nassign(\"figureHeight\", 512, envir = .GlobalEnv)\nassign(\"figureRes\", 300, envir = .GlobalEnv)\nlibrary(ggplot2) \nparseInput <- function(fileName, timeFrame){\n  \n  #READ FILE\n  k <- readLines(fileName, warn = FALSE)\n  #PARSE FILE\n  lineS <- strsplit(x=k, split = \", \")\n  \n  #Runtime\n  runTimeLine=grep(\"[OVERALL], RunTime(ms),\", k, fixed=TRUE)\n  tryCatch({\n    runTime = as.numeric(lineS[[runTimeLine]][3])\n  },error = function(e) print(paste(\"Problem in file \", fileName)))\n  # Throughput\n  throughPutLine = grep(\"[OVERALL], Throughput(ops/sec)\", k, fixed=TRUE)\n  throughPut = as.numeric(lineS[[throughPutLine]][3])\n  \n  #CREATE rawdata matrix\n  rawData <- matrix(nrow=floor(runTime/timeFrame), ncol=length(possibleActions)) \n  colnames(rawData) <- possibleActions\n  rownames(rawData) <- seq(0, floor(runTime/timeFrame)*timeFrame-1, timeFrame)/1000\n  \n  #CREATE global matrix \n  globalMatrix <- matrix(nrow = length(possibleActions), ncol = length(globalElements))\n  colnames(globalMatrix) <- globalElements\n  rownames(globalMatrix) <- possibleActions\n  \n  for(action in 1:length(possibleActions)){\n    linesOfAction <- grep(paste(\"[\", possibleActions[action], \"]\", sep = \"\"), k, fixed=TRUE)\n    for(number in linesOfAction){\n      \n      tag <- lineS[[number]][2]\n      value <- as.numeric(lineS[[number]][3])\n      \n      typeOfTag <- match(tag, globalElements)\n      if(is.na(typeOfTag)){\n        if(!is.na(as.numeric(tag)) && as.numeric(tag)/timeFrame+1<floor(runTime/timeFrame)){\n          rawData[(as.numeric(tag)/timeFrame+1), action] <- value/1000\n        }\n        #rawData[(as.numeric(tag)/timeFrame+1), action] <- value\n      }\n      else{\n        globalMatrix[action, typeOfTag] <- value/1000\n      }\n    }\n  }\n  return(list(raw = rawData, global =globalMatrix, runTime = runTime, throughPut = throughPut))\n}\n\nplotSingleData = function(data, labels, title, minX, maxX, minY, maxY, showPoints=TRUE, showAverage=TRUE){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Time(s)\",ylab = \"Latency(ms)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n  colNb <- 0\n  for(label in labels){\n    colNb <- colNb +1\n    if(showPoints){\n      lines(x = rownames(data), y = data[,label], type=\"p\",col = colNb, pch = colNb) \n    }\n    if(showAverage){\n      lines(x = rownames(data), y = movingAverage(data[,label],10), type=\"l\",col = colNb, pch = colNb, lwd=2) \n    }\n    \n  }\n  legend(\"topright\", labels, col = 1:colNb, pch = 1:colNb)\n  \n}\n\nplotMultipleDataSingleLabel = function(datas, type, labels, title, minX, maxX, minY, maxY, showPoints=TRUE, showAverage=TRUE){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Time(s)\",ylab = \"Latency(ms)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n\n  for(index in 1:length(datas)){\n    if(showPoints){\n      lines(x = rownames(datas[[index]]), y = datas[[index]][,type], type=\"p\",col = index, pch = index) \n    }\n    if(showAverage){\n      lines(x = rownames(datas[[index]]), y = movingAverage(datas[[index]][,type],movingAverageFrame), type=\"l\",col = index, pch = index, lwd=2) \n    }\n  }\n  legend(\"topright\", labels, col = 1:length(datas), pch = 1:length(datas))\n  \n}\n\nplotAll = function(files, fileNames, timeFrames, labels, exportDir){\n  data <- list();\n  rawData <- list();\n  for(i in 1:length(files)){\n    returnValue = parseInput(files[i], timeFrames[i])\n    data[[i]] <- returnValue\n    rawData[[i]] <- returnValue$raw\n    \n    minY = 0\n    #minY = min(rawData[[i]][, labels], na.rm = TRUE)\n    maxY = max(rawData[[i]][(sToRemove*timeFrames[i]/1000):nrow(rawData[[i]]), labels], na.rm = TRUE)\n    png(filename=paste(exportDir, \"/single-graph\",fileNames[i], \".png\", sep=\"\"), width=figureWidth, height=figureHeight, units=\"px\")\n    plotSingleData(rawData[[i]], labels, \n                   paste(\"Plot of\", fileNames[i])\n                   , sToRemove, data[[i]]$runTime/1000, minY, maxY)\n    dev.off(); \n  }\n  \n  for(label in labels){\n    minY = 0\n    maxY = NA\n    maxX = NA\n    for(i in 1:length(files)){\n     # minY = min(minY, min(rawData[[i]][, label], na.rm = TRUE), na.rm = TRUE)\n      maxY = max(minY, max(rawData[[i]][(sToRemove*timeFrames[i]/1000):nrow(rawData[[i]]), label], na.rm = TRUE), na.rm = TRUE)\n      maxX = max(minY, data[[i]]$runTime/1000, na.rm = TRUE)\n    }\n\n    png(filename=paste(exportDir, \"/multiple-graph\",label, \".png\", sep=\"\"), width=figureWidth, height=figureHeight, units=\"px\")\n    plotMultipleDataSingleLabel(rawData, label, fileNames, \n                   paste(\"Plot of\", label)\n                   , sToRemove, maxX, minY, maxY)\n    dev.off(); \n  }\n}\n\nplotSingleLoadMultipleLabels = function(data, labels, title, minX, maxX, minY, maxY){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Nb of requests/s\",ylab = \"Average Latency(ms)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n  \n  for(index in 1:length(labels)){\n    lines(x = rownames(data), y = data[,labels[index]], type=\"o\",col = index, pch = index)   \n  }\n  legend(\"topright\", labels, col = 1:length(labels), pch = 1:length(labels))\n  \n}\n\n\nplotMultipleLoadSingleLabel = function(datas, type, labels, title, minX, maxX, minY, maxY){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Nb of requests/s\",ylab = \"Average Latency(ms)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n  \n  for(index in 1:length(datas)){\n    lines(x = rownames(datas[[index]]), y = datas[[index]][,type], type=\"o\",col = index, pch = index)   \n  }\n  legend(\"topright\", labels, col = 1:length(datas), pch = 1:length(datas))\n  \n}\n\nplotMultipleLoadMultipleLabels = function(datas, types, labels, title, minX, maxX, minY, maxY){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Nb of requests/s\",ylab = \"Average Latency(ms)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n  \n  legende = c(1:(length(types)*length(datas)))\n  \n  for(index in 1:length(datas)){\n    for(type in 1:length(types)){\n      lines(x = rownames(datas[[index]]), y = datas[[index]][,types[type]], type=\"o\",\n            col = ((index-1)*length(types)+type), pch = ((index-1)*length(types)+type))\n      legende[(index-1)*length(types)+type] <- paste(labels[index], types[type], sep=\"-\")\n   }\n  }\n  legend(\"topright\", legende, col = 1:(length(types)*length(datas)), pch = 1:(length(types)*length(datas)))\n  \n}\n\nplotLoadTesting = function(files, dbNames, nbOfThreads, timeFrames, labels, exportDir){\n  # Collect by possibleActions on \"AverageLatency(us)\" in ms\n  data <- list();\n  globalDatas <- list();\n  minX <- NA\n  maxX <- NA\n  \n  minY <- 0\n  maxY <- NA\n  for(dbs in 1:length(files)){\n    data[[dbs]] <- list();\n    globalDatas[[dbs]] <- matrix(nrow = length(files[[dbs]]), ncol = length(possibleActions))\n    colnames(globalDatas[[dbs]]) <- possibleActions\n    rownames(globalDatas[[dbs]]) <- nbOfThreads[[dbs]]\n    for(runOfDBs in 1:length(files[[dbs]])){\n      returnValue = parseInput(files[[dbs]][runOfDBs], timeFrames[[dbs]][runOfDBs])\n      \n      data[[dbs]][[runOfDBs]] <- returnValue\n      globalDatas[[dbs]][runOfDBs, ] <- t(returnValue$global[, \"AverageLatency(us)\"])\n    }\n    \n    minX = min(min(nbOfThreads[[dbs]], na.rm = TRUE), minX, na.rm = TRUE)\n    maxX = max(max(nbOfThreads[[dbs]], na.rm = TRUE), maxX, na.rm = TRUE)\n    \n    minY = min(min(globalDatas[[dbs]], na.rm = TRUE), minY, na.rm = TRUE)\n    maxY = max(max(globalDatas[[dbs]], na.rm = TRUE), maxY, na.rm = TRUE)\n  }\n  \n  png(filename=paste(exportDir, \"/loadbalance-all\", \".png\", sep=\"\"), width=figureWidth, height=figureHeight, units=\"px\")\n  plotMultipleLoadMultipleLabels(globalDatas, labels, dbNames, \"Load plot\", minX, maxX, minY, maxY)\n  dev.off(); \n  \n  for(label in labels){\n    minX <- NA\n    maxX <- NA\n    \n    minY <- 0\n    maxY <- NA\n    for(dbs in 1:length(files)){\n      minY = min(min(globalDatas[[dbs]][,label], na.rm = TRUE), minY, na.rm = TRUE)\n      maxY = max(max(globalDatas[[dbs]][,label], na.rm = TRUE), maxY, na.rm = TRUE)\n      minX = min(min(nbOfThreads[[dbs]], na.rm = TRUE), minX, na.rm = TRUE)\n      maxX = max(max(nbOfThreads[[dbs]], na.rm = TRUE), maxX, na.rm = TRUE)\n    }\n    png(filename=paste(exportDir, \"/loadbalance-label\",label, \".png\", sep=\"\"))\n    plotMultipleLoadSingleLabel(globalDatas, label, dbNames, paste(\"Plot of\", label), minX, maxX, minY, maxY)\n    dev.off(); \n  }\n  \n  for(dbs in 1:length(files)){\n    minY <- 0\n    maxY <- NA\n    \n    minX <- min(nbOfThreads[[dbs]], na.rm = TRUE)\n    maxX <- max(nbOfThreads[[dbs]], na.rm = TRUE)\n    \n    for(label in labels){\n      minY = min(min(globalDatas[[dbs]][,label], na.rm = TRUE), minY, na.rm = TRUE)\n      maxY = max(max(globalDatas[[dbs]][,label], na.rm = TRUE), maxY, na.rm = TRUE)\n    }\n    png(filename=paste(exportDir, \"/loadbalance-db\", dbNames[[dbs]], \".png\", sep=\"\"), width=figureWidth, height=figureHeight, units=\"px\")\n    plotSingleLoadMultipleLabels(globalDatas[[dbs]], labels, paste(\"Plot for\", dbNames[[dbs]]), minX, maxX, minY, maxY)\n    dev.off(); \n  }\n  \n  globalDatas\n}\ninput1 <- parseInput(\"example_code.txt\", 200)\ninput2 <- parseInput(\"example_code2.txt\", 2000)\n\nrawData1 = input1$raw\nrawData2 = input2$raw\n\nglobalData1 = input1$global\n#plotSingleData(rawData1, c(\"UPDATE\", \"READ\"), \"TEST PLOT\", 0, input1$runTime, 0, max(rawData1[, 2], na.rm = TRUE))\n#plotSingleData(rawData2, c(\"UPDATE\", \"READ\"), \"TEST PLOT\", 0, input2$runTime, 0, max(rawData2[, 2], na.rm = TRUE))\n\n#plotMultipleDataSingleLabel(list(rawData1, rawData2), \"READ\", c(\"1\", \"2\"),\"TEST PLOT\", 0, input2$runTime, 0, max(rawData2[, 2], na.rm = TRUE))\nplotAll(c(\"example_code.txt\", \"example_code2.txt\"), c(\"file-1\", \"file-2\"), c(200, 1000),\n        c(\"UPDATE\", \"READ\"), \".\")\n\nfiles <- list()\nnbOfThreads <- list()\ntimeFrames <- list()\n\nfiles[[1]] <- c(\n  paste(\"D:/Schooljaar 2013-2014/Thesis/Results/mongodb/all-1.dat\"), \n  paste(\"D:/Schooljaar 2013-2014/Thesis/Results/mongodb/all-2.dat\"), \n  paste(\"D:/Schooljaar 2013-2014/Thesis/Results/mongodb/all-3.dat\")\n)\n\ntimeFrames[[1]] <- c(1000,1000, 1000)\nnbOfThreads[[1]] <- c(9,10,11)\n\nfiles[[2]] <- c(\n  paste(\"D:/Schooljaar 2013-2014/Thesis/Results/postgresql/all-1.dat\"), \n  paste(\"D:/Schooljaar 2013-2014/Thesis/Results/postgresql/all-2.dat\")\n)\n\ntimeFrames[[2]] <- c(1000,1000)\nnbOfThreads[[2]] <- c(9,10)\ntest <- plotLoadTesting(files, c(\"MongoDB\", \"PostgreSQL\"), nbOfThreads, \n                timeFrames, c(\"UPDATE\", \"READ\"), \".\")",
    "created" : 1392740085775.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "922830194",
    "id" : "A1B3A1A1",
    "lastKnownWriteTime" : 1393753142,
    "path" : "~/Schooljaar 2013-2014/Thesis/R/parse.R",
    "project_path" : "parse.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}