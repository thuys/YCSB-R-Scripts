{
    "contents" : "library(ggplot2) \nparseInput <- function(fileName, timeFrame){\n  #GLOBAL VAR\n  possibleActions <- c(\"INSERT\", \"UPDATE\", \"READ\", \"CLEANUP\")\n  globalElements <- c(\"Operations\", \"AverageLatency(us)\", \"MinLatency(us)\", \"MaxLatency(us)\", \"Return=1\", \"Return=0\")\n  \n  #READ FILE\n  k <- readLines(fileName, warn = FALSE)\n  #PARSE FILE\n  lineS <- strsplit(x=k, split = \", \")\n  \n  #Runtime\n  runTimeLine=grep(\"[OVERALL], RunTime(ms),\", k, fixed=TRUE)\n  runTime = as.numeric(lineS[[runTimeLine]][3])\n  # Throughput\n  throughPutLine = grep(\"[OVERALL], Throughput(ops/sec)\", k, fixed=TRUE)\n  throughPut = as.numeric(lineS[[throughPutLine]][3])\n  \n  #CREATE rawdata matrix\n  rawData <- matrix(nrow=floor(runTime/timeFrame), ncol=length(possibleActions)) \n  colnames(rawData) <- possibleActions\n  rownames(rawData) <- seq(0, floor(runTime/timeFrame)*timeFrame-1, timeFrame)\n  \n  #CREATE global matrix\n  globalMatrix <- matrix(nrow = length(possibleActions), ncol = length(globalElements))\n  colnames(globalMatrix) <- globalElements\n  rownames(globalMatrix) <- possibleActions\n  \n  for(action in 1:length(possibleActions)){\n    linesOfAction <- grep(paste(\"[\", possibleActions[action], \"]\", sep = \"\"), k, fixed=TRUE)\n    for(number in linesOfAction){\n      \n      tag <- lineS[[number]][2]\n      value <- as.numeric(lineS[[number]][3])\n      \n      typeOfTag <- match(tag, globalElements)\n      if(is.na(typeOfTag)){\n        rawData[(as.numeric(tag)/timeFrame+1), action] <- value\n      }\n      else{\n        globalMatrix[action, typeOfTag] <- value\n      }\n    }\n  }\n  \n  \n  return(list(raw = rawData, global =lineS, runTime = runTime, throughPut = throughPut))\n}\n\nplotSingleData = function(data, labels, title, minX, maxX, minY, maxY){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Time(ms)\",ylab = \"Latency(us)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n  colNb <- 0\n  for(label in labels){\n    colNb <- colNb +1\n    lines(x = rownames(data), y = data[,label], type=\"o\",col = colNb, pch = colNb) \n\n  }\n  legend(\"topright\", labels, col = 1:colNb, , title = \"Title\", pch = 1:colNb)\n  \n}\n\nplotMultipleDataSingleLabel = function(datas, type, labels, title, minX, maxX, minY, maxY){\n  plot.new()\n  heading = paste(title) \n  plot(x = 0, y = 0, type=\"n\", main=heading, xlab =\"Time(ms)\",ylab = \"Latency(us)\",\n       xlim = c(minX, maxX), ylim = c(minY, maxY))\n\n  for(index in 1:length(datas)){\n    lines(x = rownames(datas[[index]]), y = datas[[index]][,type], type=\"o\",col = index, pch = index) \n    \n  }\n  legend(\"topright\", labels, col = 1:length(datas), title = \"Title\", pch = 1:length(datas))\n  \n}\n\nplotAll = function(files, fileNames, timeFrames, labels, exportDir){\n  data <- list();\n  rawData <- list();\n  for(i in 1:length(files)){\n    data[[i]] <- parseInput(files[i], timeFrames[i])\n    rawData[[i]] <- data[[i]]$raw\n    \n    minY = min(rawData[[i]][, labels], na.rm = TRUE)\n    maxY = max(rawData[[i]][, labels], na.rm = TRUE)\n    png(filename=paste(exportDir, \"/single-graph\",fileNames[i], sep=\"\" ))\n    plotSingleData(rawData[[i]], labels, \n                   paste(\"Plot of\", fileNames[i])\n                   , 0, rawData[[i]]$runTime, minY, maxY)\n    dev.off();\n  }\n}\ninput1 <- parseInput(\"example_code.txt\", 200)\ninput2 <- parseInput(\"example_code2.txt\", 2000)\n\nrawData1 = input1$raw\nrawData2 = input2$raw\n\n#plotSingleData(rawData1, c(\"UPDATE\", \"READ\"), \"TEST PLOT\", 0, input1$runTime, 0, max(rawData1[, 2], na.rm = TRUE))\n#plotSingleData(rawData2, c(\"UPDATE\", \"READ\"), \"TEST PLOT\", 0, input2$runTime, 0, max(rawData2[, 2], na.rm = TRUE))\n\nplotMultipleDataSingleLabel(list(rawData1, rawData2), \"READ\", c(\"1\", \"2\"),\"TEST PLOT\", 0, input2$runTime, 0, max(rawData2[, 2], na.rm = TRUE))\nplotAll(c(\"example_code.txt\", \"example_code2.txt\"), c(\"file 1\", \"file 2\"), c(200, 2000),\n        c(\"UPDATE\", \"READ\"), \"\")\n\n\n",
    "created" : 1389884704921.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1156047732",
    "id" : "7FDD997E",
    "lastKnownWriteTime" : 1389893456,
    "path" : "~/Schooljaar 2013-2014/Thesis/R/parse.R",
    "project_path" : "parse.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}